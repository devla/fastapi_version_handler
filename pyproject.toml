[tool.poetry]

name = "fastapi_version_handler"

version = "0.1.0"
description = "FastAPI Version Handler: Efficient Header-Based Routing for API Versioning in FastAPI"
authors = ["Vladimir Mitrovic <vladimir.mitrovic@gmail.com>"]
repository = "https://github.com/devla/fastapi_version_handler.git"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Framework :: FastAPI",
    "Typing :: Typed",
    "Environment :: Web Environment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    # Add any additional classifiers here
]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.110.2"
jinja2 = "^3.1.3"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.23.6"
httpx = "^0.27.0"
uvicorn = "^0.29.0"
black = "^24.4.2"
ruff = "^0.4.2"
better-devtools = "^0.13.3"
pdbpp = "^0.10.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.ruff]
line-length = 120
lint.select = [
    "F",        # pyflakes
    "E",        # pycodestyle errors
    "W",        # pycodestyle warnings
    "C90",      # mccabe
    "I",        # isort
    "N",        # pep8-naming
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "S",        # flake8-bandit
    "BLE",      # flake8-blind-except
    "FBT003",   # flake8-boolean-trap
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "COM",      # flake8-commas
    "C4",       # flake8-comprehensions
    "T10",      # flake8-debugger
    "ISC",      # flake8-implicit-str-concat
    "G010",     # Logging statement uses warn instead of warning
    "G201",     # Logging .exception(...) should be used instead of .error(..., exc_info=True)
    "G202",     # Logging statement has redundant exc_info
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SIM",      # flake8-simplify
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "TD",       # flake8-todos
    "ERA",      # flake8-eradicate
    "PGH",      # pygrep-hooks
    "PLC0414",  # Import alias does not rename original package
    "PLE",      # Error
    "PLW",      # Warning
    "TRY",      # tryceratops
    "FLY",      # flynt
    "RUF",      # ruff-specific rules
    "ANN001",   # missing type annotation for arguments
    "ANN002",   # missing type annotation for *args
    "ANN003",   # missing type annotation for **kwargs
]
lint.unfixable = [
    "ERA001"    # eradicate: found commented out code can be dangerous if fixed automatically
]
lint.ignore = [
    "A002",   # builtin shadowing in arguments
    "A003",   # builtin shadowing in attributes
    "D203",   # 1 blank line required before class docstring
    "TD002",  # Missing author in TODO; try: `# TODO(<author_name>): ...`
    "ARG002", # Unused method argument
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY300", # Consider moving statement into the else clause
    "ARG001", # Unused first argument
    "ARG005", # Unused lambda argument
    "PT019",  # Fixture without value is injected as parameter, use @pytest.mark.usefixtures instead
    "SIM108"  # Use ternary operator instead of if-else block (ternaries lie to coverage)
]
extend-exclude = ["migrations"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S",        # ignore bandit security issues in tests
    "B018",     # ignore assert in tests
    "PT012",    # ignore complex with pytest.raises clauses
]
